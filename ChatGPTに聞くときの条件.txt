
# 開発環境について
・Viteを使用
・環境変数ファイルは、商用、検証、開発の3つ作成する。
・typescriptを使用する。

# パッケージ管理
・yarn

# フォルダ構成
src
├── assets        画像やフォントなどの静的ファイル
├── components    アプリケーション全体で使用できる共通コンポーネント
├── config        環境変数などをエクスポートするところ
├── features      機能ベースモジュール
│ ├ features/<機能名>/routes
│ │   実際の画面を描画するtsxを格納します。複数行にわたってcomponentなどの要素を直書きしていくのではなく、極力componentsに書き出したものを参照する形でroutesのファイルに記述していきます。スタイルを長く書いたり、条件分岐が複雑で多岐に渡るなどの場合に、積極的にcomponentに切り出せないか考えます。
│ ├ features/<機能名>/components
│ │   routesから参照するcomponentを格納します。基本的に1ファイル1コンポーネントにします。
│ ├ features/<機能名>/api
│ │   api呼び出しに関する処理を格納します。
│ └ features/<機能名>/types
│     型宣言に関するファイルを格納します。
├── hooks        アプリケーション全体で使用できる共通hooks
├── lib          ライブラリをアプリケーション用に設定して再度エクスポートしたもの
├── providers    アプリケーションのすべてのプロバイダー、サーバーステートなどのProviderはここで記述する
├── routes       ルーティングの設定
├── stores       グローバルステートストア
├── test         テストユーティリティとモックサーバ
├── types        アプリケーション全体で使用される基本的な型の定義
└── utils        共通のユーティリティ関数

# Reactについて
・Reactのバージョンは18

# state管理
・stateは3つに分けて管理する。
・その3つとは、サーバーステート、グローバルステートmローカルステート。
・サーバーステートは、はtanstack query、グローバルステートはzustand、ローカルステートはうせStateを使用する。
・サーバーステート、グローバルステートの管理はサーバーステートの管理を行うカスタムフック、グローバルステートの管理を行うカスタムフックと別々に作成して、コンポーネントで参照する。

# typescriptの設定
・型を定義する際はtypeを使用する、interfaceは使用しない。

# コンポーネント作成時の条件
・コンポーネントを定義する際は、アロー関数を使用する。
・コンポーネントを定義する際は、型：FCの使用は不要。

# 関数作成時の条件
・関数を定義する際は、アロー関数を使用する。

# コンポーネントと関数の型を作成時の条件
・interfaceではなくtypeを使用する。

# フォーム
・react-hook-formを使用して、valibotでバリデーションを行う。
・テキストボックス、テキストエリア、チェックボックス、ラジオボタン、セレクトボックス、デートピッカーを作成する。
・コンポーネントはsrc/components/Form配下に作成する。
・react-hook-formのuseContextを使用して、FormProviderを作成する。



# ドキュメントの体裁
・Reactアプリケーション開発におけるドキュメントの体裁を保ってください。

# 出力するサンプルの内容
・サンプルコードの出力は省略しない。
・カスタムフックを出力してからコンポーネントの出力を行う。
・説明をプログラミング初心者にもわかりやすいように懇切丁寧にコメントを記述する。

